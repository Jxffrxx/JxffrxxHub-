--------------------------------------------------------------------------------
-- Nihub-Style Advanced UI Library
-- Part 1: Core Module, Services, Basic Window Setup
-- 
-- Author: Your Name/Handle
-- GitHub: https://github.com/yourname/yourrepo
--
-- If you paste all these multi-part code sections into a single .lua file,
-- you will eventually get ~2000 lines of fully functional code.
--------------------------------------------------------------------------------

--// Services and Utility References //--

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

local LocalPlayer = Players.LocalPlayer

-- Because some exploits / script executors have different ways to handle the GUI
-- hierarchy, we'll check for a couple popular ones:
local function SafeInstanceParent(guiObject)
    if gethui then
        guiObject.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(guiObject)
        guiObject.Parent = CoreGui
    else
        -- fallback
        guiObject.Parent = CoreGui
    end
end

--// Library Table //--
local NihubLibrary = {}

-- Use this table to store configuration flags, references to UI elements, etc.
NihubLibrary.Flags = {}

-- We’ll define color themes that mimic the black/green styling from the screenshot.
NihubLibrary.Themes = {
    DefaultDarkGreen = {
        -- General background
        MainBackground = Color3.fromRGB(15, 17, 19),
        -- Side panel & top panel
        SidebarBackground = Color3.fromRGB(20, 25, 20),
        TopbarBackground  = Color3.fromRGB(25, 33, 25),
        -- Main accent color for toggles, highlights
        AccentGreen       = Color3.fromRGB(15, 255, 128),
        AccentRed         = Color3.fromRGB(220, 50, 50),
        AccentText        = Color3.fromRGB(235, 235, 235),
        
        -- Drop shadows
        ShadowColor       = Color3.fromRGB(0, 0, 0),
        ShadowTransparency= 0.4,
        
        -- Button / Toggle backgrounds
        ElementBackground = Color3.fromRGB(35, 40, 35),
        ElementHover      = Color3.fromRGB(45, 50, 45),
        
        -- Toggles
        ToggleEnabled     = Color3.fromRGB(0, 200, 100),
        ToggleDisabled    = Color3.fromRGB(80, 80, 80),
        
        -- Sliders
        SliderBar         = Color3.fromRGB(43, 105, 70),
        SliderProgress    = Color3.fromRGB(20, 200, 120),
        
        -- Strokes
        StrokeColor       = Color3.fromRGB(60, 60, 60),
        
        -- Text
        Font              = Enum.Font.Gotham,
        TextColor         = Color3.fromRGB(230, 230, 230),
    },
    
    -- You can define other color themes if you want. We'll default to "DefaultDarkGreen."
}

-- The currently selected theme.  We'll default to "DefaultDarkGreen."
NihubLibrary.CurrentTheme = NihubLibrary.Themes.DefaultDarkGreen

-- For advanced layout, we might want an internal custom tween function:
local function TweenObject(object, properties, duration, easingStyle, easingDirection)
    local style = easingStyle or Enum.EasingStyle.Quint
    local direction = easingDirection or Enum.EasingDirection.Out
    local ti = TweenInfo.new(duration, style, direction)
    local tween = TweenService:Create(object, ti, properties)
    tween:Play()
    return tween
end

-- Basic references for minimization / hidden states:
local Minimised = false
local Hidden = false
local BusyTween = false

--// CREATE MAIN UI SCREENGUI //--
local function CreateScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NihubPrivateUI"
    SafeInstanceParent(screenGui)
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    return screenGui
end

-- The main library function to create the "Window."
-- This is analogous to "CreateWindow" in some other libraries.
function NihubLibrary:CreateWindow(settings)
    -- Settings might include: 
    -- Title, Subtitle, IntroText, Theme, 
    -- Keybind for toggling (like RightShift),
    -- Possibly other config stuff.

    local screenGui = CreateScreenGui()
    
    local Window = {}
    Window._screenGui = screenGui
    Window._tabs = {}
    
    -- We store any user preferences:
    Window.Title = settings.Title or "Nihub Private"
    Window.Subtitle = settings.Subtitle or ""
    Window.Theme = settings.Theme or "DefaultDarkGreen"
    if NihubLibrary.Themes[Window.Theme] then
        NihubLibrary.CurrentTheme = NihubLibrary.Themes[Window.Theme]
    end
    
    -- Create the top bar (like the red “Farm” bar in the screenshot, 
    -- but we’ll do an adjustable style).
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = screenGui
    MainFrame.BackgroundColor3 = NihubLibrary.CurrentTheme.MainBackground
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.25, 0, 0.2, 0)
    MainFrame.Size = UDim2.new(0, 700, 0, 500)
    
    -- Make a corner if you like a round shape, or keep it square:
    local corner = Instance.new("UICorner", MainFrame)
    corner.CornerRadius = UDim.new(0, 6)
    
    -- A UIStroke for a subtle outline (optional)
    local stroke = Instance.new("UIStroke", MainFrame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = NihubLibrary.CurrentTheme.StrokeColor
    stroke.Transparency = 0.6
    
    -- Shadow (we'll do a simple image-based shadow):
    local ShadowHolder = Instance.new("Frame")
    ShadowHolder.Name = "ShadowHolder"
    ShadowHolder.BackgroundTransparency = 1
    ShadowHolder.Size = UDim2.new(1, 20, 1, 20)
    ShadowHolder.Position = UDim2.new(0, -10, 0, -10)
    ShadowHolder.Parent = MainFrame
    local ShadowImage = Instance.new("ImageLabel", ShadowHolder)
    ShadowImage.AnchorPoint = Vector2.new(0.5, 0.5)
    ShadowImage.BackgroundTransparency = 1
    ShadowImage.Image = "rbxassetid://1316045217" -- or any shadow asset
    ShadowImage.ImageColor3 = NihubLibrary.CurrentTheme.ShadowColor
    ShadowImage.Size = UDim2.new(1, 47, 1, 47)
    ShadowImage.Position = UDim2.new(0.5, 0, 0.5, 0)
    ShadowImage.ImageTransparency = NihubLibrary.CurrentTheme.ShadowTransparency

    -- Make a top bar section to hold the title, close, minimize, etc:
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = MainFrame
    TopBar.BackgroundColor3 = NihubLibrary.CurrentTheme.TopbarBackground
    TopBar.BorderSizePixel = 0
    TopBar.Size = UDim2.new(1, 0, 0, 40)
    
    local topCorner = Instance.new("UICorner", TopBar)
    topCorner.CornerRadius = UDim.new(0, 6)
    
    -- Because of the corner, we can keep the top corners round, but we want
    -- the bottom corners of this top bar to remain square. We'll do a small "repair"
    -- trick or keep it as a single corner. 
    -- For now, let's just leave the corner as is. If it looks odd, we can fix it.

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Parent = TopBar
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Size = UDim2.new(1, -100, 1, 0)
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)
    TitleLabel.Font = NihubLibrary.CurrentTheme.Font
    TitleLabel.Text = Window.Title
    TitleLabel.TextSize = 16
    TitleLabel.TextColor3 = NihubLibrary.CurrentTheme.TextColor
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Buttons for hide/minimize and close if you want. Let’s do a hide button:
    local HideButton = Instance.new("TextButton")
    HideButton.Name = "HideButton"
    HideButton.Parent = TopBar
    HideButton.BackgroundColor3 = Color3.fromRGB(255,0,0)
    HideButton.BackgroundTransparency = 1
    HideButton.Size = UDim2.new(0, 50, 1, 0)
    HideButton.Position = UDim2.new(1, -50, 0, 0)
    HideButton.Font = NihubLibrary.CurrentTheme.Font
    HideButton.Text = "_"
    HideButton.TextSize = 18
    HideButton.TextColor3 = NihubLibrary.CurrentTheme.TextColor
    
    -- Minimizing logic:
    HideButton.MouseButton1Click:Connect(function()
        if BusyTween then return end
        if Hidden then
            -- Unhide
            Hidden = false
            BusyTween = true
            TweenObject(MainFrame, {Size = UDim2.new(0, 700, 0, 500)}, 0.5)
            wait(0.5)
            BusyTween = false
        else
            -- Hide
            Hidden = true
            BusyTween = true
            TweenObject(MainFrame, {Size = UDim2.new(0, 700, 0, 40)}, 0.5)
            wait(0.5)
            BusyTween = false
        end
    end)
    
    -- Simple drag behavior for the top bar:
    local dragging = false
    local dragStart, startPos
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if dragging then
                local delta = input.Position - dragStart
                MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end
    end)

    --// SIDEBAR (like the vertical red highlight in the screenshot) //--
    -- We'll create a side navigation that can hold tabs: "Main", "Farm", "Misc", etc.

    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = MainFrame
    Sidebar.Size = UDim2.new(0, 150, 1, -40) -- 1 minus the height of the top bar
    Sidebar.Position = UDim2.new(0, 0, 0, 40)
    Sidebar.BackgroundColor3 = NihubLibrary.CurrentTheme.SidebarBackground
    Sidebar.BorderSizePixel = 0
    
    local sideCorner = Instance.new("UICorner", Sidebar)
    sideCorner.CornerRadius = UDim.new(0, 0)  -- might want no rounding on the sidebar
    
    -- We'll store the "Tab Buttons" in here.
    local TabButtonsHolder = Instance.new("Frame")
    TabButtonsHolder.Name = "TabButtonsHolder"
    TabButtonsHolder.Parent = Sidebar
    TabButtonsHolder.BackgroundTransparency = 1
    TabButtonsHolder.Size = UDim2.new(1, 0, 1, 0)
    
    local TabListLayout = Instance.new("UIListLayout", TabButtonsHolder)
    TabListLayout.FillDirection = Enum.FillDirection.Vertical
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Padding = UDim.new(0, 5)
    
    --// RIGHT-SIDE MAIN CONTENT FRAME //--
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Parent = MainFrame
    ContentFrame.BackgroundColor3 = NihubLibrary.CurrentTheme.MainBackground
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Position = UDim2.new(0, 150, 0, 40)
    ContentFrame.Size = UDim2.new(1, -150, 1, -40)
    
    local contentCorner = Instance.new("UICorner", ContentFrame)
    contentCorner.CornerRadius = UDim.new(0, 6)
    
    local contentStroke = Instance.new("UIStroke", ContentFrame)
    contentStroke.Color = NihubLibrary.CurrentTheme.StrokeColor
    contentStroke.Thickness = 1
    contentStroke.Transparency = 0.6

    -- We'll store the pages in here. Each tab gets its own container.
    local PagesFolder = Instance.new("Folder")
    PagesFolder.Name = "PagesFolder"
    PagesFolder.Parent = ContentFrame

    -- Return a Window object with methods for adding tabs:
    Window.MainFrame = MainFrame
    Window.Sidebar = Sidebar
    Window.ContentFrame = ContentFrame
    Window.PagesFolder = PagesFolder
    Window.TabButtonsHolder = TabButtonsHolder

    -- Return the Window object to the user so they can keep building
    return Window
end


--------------------------------------------------------------------------------
-- End of Part 1
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Nihub-Style Advanced UI Library
-- Part 2: Tab Creation & Navigation
--
-- Continue from Part 1. Paste this below Part 1’s code. The final library
-- will be around 2000 lines total by the end of these multi-part messages.
--------------------------------------------------------------------------------

local NihubLibrary = ... -- This line assumes you appended to the same file 
                         -- where Part 1 returned NihubLibrary.

-- We recommend you remove this line if you’re combining code manually 
-- in a single .lua. Just continue from the same table.

--------------------------------------------------------------------------------
-- PART 2: Implementation starts
--------------------------------------------------------------------------------

--// Utility: Safe tween function //--
local function TweenObject(object, properties, duration, easingStyle, easingDirection)
    local TweenService = game:GetService("TweenService")
    local style = easingStyle or Enum.EasingStyle.Quint
    local direction = easingDirection or Enum.EasingDirection.Out
    local ti = TweenInfo.new(duration, style, direction)
    local tween = TweenService:Create(object, ti, properties)
    tween:Play()
    return tween
end

-- We define a function that will create tab buttons and pages.
-- We do this by extending the Window object from Part 1:
function NihubLibrary:CreateTab(window, tabName, iconId)
    --[[ 
        window  : The “Window” table returned by CreateWindow()
        tabName : Name to display on the tab button (“Farm”, “Misc”, etc.)
        iconId  : (Optional) if you want an ImageLabel for the tab’s icon
    ]]--

    local theme = self.CurrentTheme
    local TabButtonHolder = window.TabButtonsHolder
    local PagesFolder = window.PagesFolder
    
    --// 1) Create the Page frame (the content area) //--
    local PageFrame = Instance.new("ScrollingFrame")
    PageFrame.Name = tabName .. "_Page"
    PageFrame.Parent = PagesFolder
    PageFrame.BackgroundColor3 = theme.MainBackground
    PageFrame.BorderSizePixel = 0
    PageFrame.Size = UDim2.new(1, 0, 1, 0)
    PageFrame.Visible = false
    PageFrame.ScrollBarThickness = 4
    PageFrame.ScrollBarImageColor3 = Color3.fromRGB(80, 80, 80) 
    PageFrame.ZIndex = 2

    -- Optionally, a UIListLayout for stacking elements inside the PageFrame
    local PageLayout = Instance.new("UIListLayout")
    PageLayout.Name = "PageLayout"
    PageLayout.FillDirection = Enum.FillDirection.Vertical
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 8)
    PageLayout.Parent = PageFrame
    
    -- Optional “padding” inside the scrolling frame
    local PagePadding = Instance.new("UIPadding")
    PagePadding.Parent = PageFrame
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.PaddingTop = UDim.new(0, 10)

    --// 2) Create the Tab Button in the sidebar //--
    local ButtonFrame = Instance.new("Frame")
    ButtonFrame.Name = tabName .. "_Button"
    ButtonFrame.Parent = TabButtonHolder
    ButtonFrame.Size = UDim2.new(1, -10, 0, 40) 
    ButtonFrame.BackgroundColor3 = Color3.fromRGB(20, 25, 20) 
    ButtonFrame.BackgroundTransparency = 0.15 
    ButtonFrame.BorderSizePixel = 0

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = ButtonFrame

    local stroke = Instance.new("UIStroke")
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.7
    stroke.Parent = ButtonFrame

    local LayoutButton = Instance.new("TextButton")
    LayoutButton.Name = "LayoutButton"
    LayoutButton.Parent = ButtonFrame
    LayoutButton.Size = UDim2.new(1, 0, 1, 0)
    LayoutButton.BackgroundTransparency = 1
    LayoutButton.Text = ""
    LayoutButton.ZIndex = 2
    
    -- If you want an icon:
    local IconImage = Instance.new("ImageLabel")
    IconImage.Name = "IconImage"
    IconImage.Parent = ButtonFrame
    IconImage.Size = UDim2.new(0, 20, 0, 20)
    IconImage.Position = UDim2.new(0, 8, 0.5, -10)
    IconImage.BackgroundTransparency = 1
    IconImage.ImageColor3 = theme.TextColor
    if iconId then
        IconImage.Image = "rbxassetid://" .. tostring(iconId)
    else
        IconImage.Image = "" -- or fallback
    end

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Parent = ButtonFrame
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, iconId and 38 or 10, 0, 0)
    TitleLabel.Size = UDim2.new(1, -(iconId and 38 or 10), 1, 0)
    TitleLabel.Font = theme.Font
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.TextSize = 15
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Text = tabName

    -- Animate (on creation) to fade in:
    ButtonFrame.BackgroundTransparency = 1
    stroke.Transparency = 1
    TitleLabel.TextTransparency = 1
    IconImage.ImageTransparency = 1

    TweenObject(ButtonFrame, {BackgroundTransparency = 0.15}, 0.6)
    TweenObject(stroke, {Transparency = 0.7}, 0.6)
    TweenObject(TitleLabel, {TextTransparency = 0}, 0.6)
    TweenObject(IconImage, {ImageTransparency = 0}, 0.6)
    
    --// 3) Behavior: When a user clicks the tab button, show that page //--
    local function SwitchToThisTab()
        -- Hide all pages
        for _, child in ipairs(PagesFolder:GetChildren()) do
            if child:IsA("ScrollingFrame") then
                child.Visible = false
            end
        end
        -- Show this page
        PageFrame.Visible = true
        
        -- Highlight the selected button, unhighlight others
        for _, b in ipairs(TabButtonHolder:GetChildren()) do
            if b:IsA("Frame") and b ~= ButtonFrame then
                TweenObject(b, {BackgroundTransparency = 0.35}, 0.3)
                if b:FindFirstChild("TitleLabel") then
                    TweenObject(b.TitleLabel, {TextTransparency = 0.2}, 0.3)
                end
            end
        end
        TweenObject(ButtonFrame, {BackgroundTransparency = 0.05}, 0.3)
        TweenObject(TitleLabel, {TextTransparency = 0}, 0.3)
    end

    LayoutButton.MouseButton1Click:Connect(function()
        SwitchToThisTab()
    end)

    -- We’ll add a small table to represent this tab in code:
    local Tab = {}
    Tab.Name = tabName
    Tab.PageFrame = PageFrame
    Tab.ButtonFrame = ButtonFrame

    -- For convenience, let's automatically show the first tab we create.
    -- If we want the second tab to not appear by default, we’ll handle that
    -- logic outside. For now, if no other pages are visible, this one becomes visible.
    local noPagesVisible = true
    for _, c in ipairs(PagesFolder:GetChildren()) do
        if c:IsA("ScrollingFrame") and c.Visible then
            noPagesVisible = false
            break
        end
    end
    if noPagesVisible then
        PageFrame.Visible = true
        TweenObject(ButtonFrame, {BackgroundTransparency = 0.05}, 0.3)
        TweenObject(TitleLabel, {TextTransparency = 0}, 0.3)
    end

    -- We can store reference for future UI elements creation:
    -- We'll define methods in future parts to create toggles, sliders, etc.
    function Tab:CreateSection(sectionName)
        -- We'll implement in a future part or now if you prefer
        -- This method might create a labeled "section" container in the PageFrame.
        local SectionFrame = Instance.new("Frame")
        SectionFrame.Name = (sectionName or "Section") .. "_Section"
        SectionFrame.Parent = PageFrame
        SectionFrame.BackgroundColor3 = theme.ElementBackground
        SectionFrame.BorderSizePixel = 0
        SectionFrame.Size = UDim2.new(1, -10, 0, 40) -- We'll auto-size later
        
        local corner = Instance.new("UICorner", SectionFrame)
        corner.CornerRadius = UDim.new(0, 4)

        local stroke = Instance.new("UIStroke", SectionFrame)
        stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        stroke.Thickness = 1
        stroke.Color = theme.StrokeColor
        stroke.Transparency = 0.6

        local Title = Instance.new("TextLabel")
        Title.Name = "SectionTitle"
        Title.Parent = SectionFrame
        Title.BackgroundTransparency = 1
        Title.Position = UDim2.new(0, 10, 0, 0)
        Title.Size = UDim2.new(1, -20, 1, 0)
        Title.Font = theme.Font
        Title.TextColor3 = theme.TextColor
        Title.TextSize = 14
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Title.Text = sectionName or "New Section"

        -- Animate in:
        SectionFrame.BackgroundTransparency = 1
        stroke.Transparency = 1
        Title.TextTransparency = 1

        TweenObject(SectionFrame, {BackgroundTransparency = 0}, 0.4)
        TweenObject(stroke, {Transparency = 0.6}, 0.4)
        TweenObject(Title, {TextTransparency = 0}, 0.4)

        return SectionFrame
    end

    -- For now, just return Tab so we can chain calls like:
    -- local myTab = NihubLibrary:CreateTab(window, "Farm")
    -- local section = myTab:CreateSection("Automation")
    return Tab
end

--------------------------------------------------------------------------------
-- EXTEND THE WINDOW OBJECT
-- We add a function "CreateTab" to the Window's table, so the usage is:
--   local tab = MyWindow:CreateTab("Farm", 123456789)
--------------------------------------------------------------------------------
function NihubLibrary._createWindowMethods(window)
    function window:CreateTab(tabName, iconId)
        return NihubLibrary:CreateTab(self, tabName, iconId)
    end
end

-- In Part 1, we returned a Window from CreateWindow. We’ll revise that function
-- so it calls `_createWindowMethods`. If needed, you can do it inline or here:
local oldCreateWindow = NihubLibrary.CreateWindow
function NihubLibrary.CreateWindow(self, settings)
    local newWindow = oldCreateWindow(self, settings)
    NihubLibrary._createWindowMethods(newWindow)
    return newWindow
end

-- Part 1 ended with: return NihubLibrary. Now we continue to return it again:
--------------------------------------------------------------------------------
-- End of Part 2
--------------------------------------------------------------------------------

return NihubLibrary

