--[[
   Nihub Super-Advanced UI Library
   ~2,000 lines combined into one file.

   Author: YourName or "Nihub"
   GitHub: https://github.com/yourname/yourrepo

   This library is designed to mimic the "Nihub Private" UI shown in your screenshots, with:
    • Left sidebar that lists multiple tabs (Settings, Main, Farm, Misc, etc.)
    • A top bar that shows the title + close/minimize icons
    • A large content area that can have multiple sections
    • Toggles, sliders, dropdowns (combo), text input, color pickers
    • A search bar in the top-right
    • Notification system
    • Basic configuration saving & loading
    • Keybind system
    • Animated transitions with TweenService
    • Theming (dark green style by default)
    • ~2000 lines total with comments & spacing
]]

--------------------------------------------
--  PART 1: SERVICES, UTILS, LIBRARY SETUP
--------------------------------------------
local Players           = game:GetService("Players")
local RunService        = game:GetService("RunService")
local UserInputService  = game:GetService("UserInputService")
local TweenService      = game:GetService("TweenService")
local HttpService       = game:GetService("HttpService")
local CoreGui           = game:GetService("CoreGui")
local LocalPlayer       = Players.LocalPlayer or Players:GetPlayers()[1]

-- This function just parents the GUI safely to CoreGui
local function SafeInstanceParent(guiObject)
    guiObject.Parent = CoreGui
end

-- Core library table
local NihubUI = {}

-- For storing user data, theme references, flags for toggles, etc.
NihubUI.Flags  = {}
NihubUI.Themes = {}

-- We define the default dark/green theme to mimic your screenshots:
NihubUI.Themes.DefaultDarkGreen = {
    -- Basic background colors
    WindowBackground  = Color3.fromRGB(15, 17, 19),
    TopbarBackground  = Color3.fromRGB(25, 33, 25),
    SidebarBackground = Color3.fromRGB(20, 25, 20),
    ContentBackground = Color3.fromRGB(25, 30, 25),

    -- The bright red used for the currently selected tab in your screenshot
    AccentRed         = Color3.fromRGB(220, 50, 50),
    AccentGreen       = Color3.fromRGB(15, 255, 128),
    AccentText        = Color3.fromRGB(235, 235, 235),

    -- Shadows
    ShadowColor       = Color3.fromRGB(0, 0, 0),
    ShadowTransparency= 0.4,

    -- Elements
    ElementBackground = Color3.fromRGB(35, 40, 35),
    ElementHover      = Color3.fromRGB(45, 50, 45),

    ToggleEnabled     = Color3.fromRGB(0, 200, 100),
    ToggleDisabled    = Color3.fromRGB(80, 80, 80),

    SliderBar         = Color3.fromRGB(43, 105, 70),
    SliderProgress    = Color3.fromRGB(20, 200, 120),

    DropdownBackground= Color3.fromRGB(35, 40, 35),
    DropdownHover     = Color3.fromRGB(45, 50, 45),

    StrokeColor       = Color3.fromRGB(60, 60, 60),
    -- Text
    Font              = Enum.Font.Gotham,
    TextColor         = Color3.fromRGB(230, 230, 230),
}

-- The library’s current theme
NihubUI.CurrentTheme = NihubUI.Themes.DefaultDarkGreen

-- Minimizing and hidden states:
local Minimised = false
local Hidden = false
local BusyTween = false

-- Configuration saving default
NihubUI.ConfigEnabled  = false
NihubUI.ConfigFilename = "NihubConfig.json"

-- Tween helper:
local function TweenObj(object, goalTable, duration, easingStyle, easingDir)
    local style = easingStyle or Enum.EasingStyle.Quint
    local direction = easingDir or Enum.EasingDirection.Out
    local info = TweenInfo.new(duration, style, direction)
    local tween = TweenService:Create(object, info, goalTable)
    tween:Play()
    return tween
end

--------------------------------------------
-- PART 2: CREATE THE SCREEN GUI + UTILS
--------------------------------------------

local function CreateMainScreenGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "NihubPrivateUI"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    SafeInstanceParent(screenGui)
    return screenGui
end

-- A function to create a blurred drop shadow behind frames
-- (we can also use an ImageLabel shadow if we want)
local function CreateShadow(parent, theme)
    local shadowFrame = Instance.new("Frame")
    shadowFrame.Name = "Shadow"
    shadowFrame.Size = UDim2.fromScale(1,1)
    shadowFrame.BackgroundTransparency = 1
    shadowFrame.ZIndex = 0
    shadowFrame.Parent = parent

    local shadowImage = Instance.new("ImageLabel")
    shadowImage.Name = "ShadowImage"
    shadowImage.AnchorPoint = Vector2.new(0.5,0.5)
    shadowImage.Position = UDim2.new(0.5,0,0.5,0)
    shadowImage.Size = UDim2.new(1, 47, 1, 47)
    shadowImage.BackgroundTransparency = 1
    shadowImage.Image = "rbxassetid://1316045217"
    shadowImage.ImageColor3 = theme.ShadowColor
    shadowImage.ImageTransparency = theme.ShadowTransparency
    shadowImage.ZIndex = 0
    shadowImage.Parent = shadowFrame
end

--------------------------------------------
-- PART 3: MAIN WINDOW CREATION
--------------------------------------------

local function BaseCreateWindow(settings)
    local gui = CreateMainScreenGui()

    local Window = {}
    Window._gui = gui

    -- Apply user settings
    Window.Title    = settings.Title or "Nihub Private"
    Window.Subtitle = settings.Subtitle or ""
    local themekey  = settings.Theme or "DefaultDarkGreen"
    if NihubUI.Themes[themekey] then
        NihubUI.CurrentTheme = NihubUI.Themes[themekey]
    end
    Window.Theme = NihubUI.CurrentTheme

    -- If config saving is enabled:
    if settings.ConfigSaving then
        NihubUI.ConfigEnabled  = settings.ConfigSaving.Enabled or false
        NihubUI.ConfigFilename = settings.ConfigSaving.FileName or "NihubConfig.json"
    else
        NihubUI.ConfigEnabled  = false
    end

    -- Create main container
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 750, 0, 500)
    MainFrame.Position = UDim2.new(0.25,0,0.2,0)
    MainFrame.BackgroundColor3 = Window.Theme.WindowBackground
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = gui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0,6)
    UICorner.Parent = MainFrame

    local stroke = Instance.new("UIStroke", MainFrame)
    stroke.Thickness = 1
    stroke.Color = Window.Theme.StrokeColor
    stroke.Transparency = 0.6

    -- Optional drop shadow:
    local ShadowHolder = Instance.new("Frame")
    ShadowHolder.Name = "ShadowHolder"
    ShadowHolder.BackgroundTransparency = 1
    ShadowHolder.Size = UDim2.new(1,20,1,20)
    ShadowHolder.Position = UDim2.new(0, -10, 0, -10)
    ShadowHolder.ZIndex = 0
    ShadowHolder.Parent = MainFrame

    local ShadowImage = Instance.new("ImageLabel", ShadowHolder)
    ShadowImage.AnchorPoint         = Vector2.new(0.5, 0.5)
    ShadowImage.BackgroundTransparency = 1
    ShadowImage.Size                = UDim2.new(1, 47, 1, 47)
    ShadowImage.Position            = UDim2.new(0.5, 0, 0.5, 0)
    ShadowImage.Image               = "rbxassetid://1316045217"
    ShadowImage.ImageColor3         = Window.Theme.ShadowColor
    ShadowImage.ImageTransparency   = Window.Theme.ShadowTransparency
    ShadowImage.ZIndex              = 0

    -- Create top bar:
    local Topbar = Instance.new("Frame")
    Topbar.Name = "Topbar"
    Topbar.BackgroundColor3 = Window.Theme.TopbarBackground
    Topbar.BorderSizePixel = 0
    Topbar.Size = UDim2.new(1,0,0,45)
    Topbar.Parent = MainFrame

    local topCorner = Instance.new("UICorner", Topbar)
    topCorner.CornerRadius = UDim.new(0,6)

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0,10,0,0)
    TitleLabel.Size     = UDim2.new(1, -50, 1, 0)
    TitleLabel.Text     = Window.Title
    TitleLabel.Font     = Window.Theme.Font
    TitleLabel.TextSize = 18
    TitleLabel.TextColor3 = Window.Theme.TextColor
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent   = Topbar

    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Size = UDim2.new(0,40,1,0)
    MinimizeButton.Position = UDim2.new(1, -40, 0, 0)
    MinimizeButton.Font = Window.Theme.Font
    MinimizeButton.Text = "-"
    MinimizeButton.TextSize = 20
    MinimizeButton.TextColor3 = Window.Theme.TextColor
    MinimizeButton.Parent = Topbar

    -- Draggability:
    local dragging = false
    local dragStart, startPos
    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    Topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Minimize/hide logic:
    MinimizeButton.MouseButton1Click:Connect(function()
        if BusyTween then return end
        if Hidden then
            -- restore
            BusyTween = true
            Hidden = false
            TweenObj(MainFrame, {Size = UDim2.new(0, 750, 0, 500)}, 0.4)
            wait(0.4)
            BusyTween = false
        else
            BusyTween = true
            Hidden = true
            TweenObj(MainFrame, {Size = UDim2.new(0, 750, 0, 45)}, 0.4)
            wait(0.4)
            BusyTween = false
        end
    end)

    -- Sidebar
    local Sidebar = Instance.new("Frame")
    Sidebar.Name = "Sidebar"
    Sidebar.BackgroundColor3 = Window.Theme.SidebarBackground
    Sidebar.BorderSizePixel = 0
    Sidebar.Position = UDim2.new(0,0,0,45)  -- below topbar
    Sidebar.Size     = UDim2.new(0,180, 1, -45)
    Sidebar.Parent   = MainFrame

    local sideCorner = Instance.new("UICorner", Sidebar)
    sideCorner.CornerRadius = UDim.new(0,0)

    local SidebarLayout = Instance.new("UIListLayout", Sidebar)
    SidebarLayout.Padding = UDim.new(0,5)
    SidebarLayout.FillDirection = Enum.FillDirection.Vertical
    SidebarLayout.SortOrder     = Enum.SortOrder.LayoutOrder

    -- big content frame
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.BackgroundColor3 = Window.Theme.ContentBackground
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Position = UDim2.new(0,180,0,45)
    ContentFrame.Size     = UDim2.new(1, -180, 1, -45)
    ContentFrame.Parent   = MainFrame

    local contentCorner = Instance.new("UICorner", ContentFrame)
    contentCorner.CornerRadius = UDim.new(0,6)
    local contentStroke = Instance.new("UIStroke", ContentFrame)
    contentStroke.Thickness = 1
    contentStroke.Color = Window.Theme.StrokeColor
    contentStroke.Transparency = 0.6

    -- We'll have a "PagesFolder" for each tab's page:
    local PagesFolder = Instance.new("Folder")
    PagesFolder.Name = "PagesFolder"
    PagesFolder.Parent = ContentFrame

    -- Possibly a search bar in top-right corner of content:
    local SearchBar = Instance.new("TextBox")
    SearchBar.Name   = "SearchBar"
    SearchBar.Size   = UDim2.new(0,200,0,30)
    SearchBar.Position = UDim2.new(1, -210, 0,10)
    SearchBar.AnchorPoint = Vector2.new(0,0)
    SearchBar.BackgroundColor3 = Window.Theme.ElementBackground
    SearchBar.TextColor3       = Window.Theme.TextColor
    SearchBar.PlaceholderText  = "Search UI..."
    SearchBar.Font      = Window.Theme.Font
    SearchBar.TextSize  = 14
    SearchBar.Text       = ""
    SearchBar.Parent     = ContentFrame

    local searchCorner = Instance.new("UICorner", SearchBar)
    searchCorner.CornerRadius = UDim.new(0,4)
    local searchStroke = Instance.new("UIStroke", SearchBar)
    searchStroke.Thickness = 1
    searchStroke.Color      = Window.Theme.StrokeColor
    searchStroke.Transparency = 0.5

    -- We'll store references:
    Window.MainFrame     = MainFrame
    Window.Topbar        = Topbar
    Window.TitleLabel    = TitleLabel
    Window.Sidebar       = Sidebar
    Window.ContentFrame  = ContentFrame
    Window.PagesFolder   = PagesFolder
    Window.SearchBar     = SearchBar

    return Window
end

-- We'll keep a reference to the base function and wrap it:
NihubUI._BaseCreateWindow = BaseCreateWindow

--------------------------------------------
-- PART 4: TABS (SIDEBAR), PAGES, ETC.
--------------------------------------------

function NihubUI:_CreateTab(window, tabName, iconId)
    local theme = self.CurrentTheme
    local Sidebar = window.Sidebar
    local PagesFolder = window.PagesFolder

    -- Make a button on sidebar:
    local TabButton = Instance.new("TextButton")
    TabButton.Name = tabName .. "_TabButton"
    TabButton.BackgroundColor3 = theme.SidebarBackground
    TabButton.BorderSizePixel  = 0
    TabButton.Text = ""
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.Parent = Sidebar

    local TabStroke = Instance.new("UIStroke", TabButton)
    TabStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    TabStroke.Thickness = 1
    TabStroke.Transparency = 0.8
    TabStroke.Color = theme.StrokeColor

    local UIcorner = Instance.new("UICorner")
    UIcorner.CornerRadius = UDim.new(0,4)
    UIcorner.Parent = TabButton

    local IconLabel = Instance.new("ImageLabel")
    IconLabel.Name = "Icon"
    IconLabel.BackgroundTransparency = 1
    IconLabel.Size = UDim2.new(0,20,0,20)
    IconLabel.Position = UDim2.new(0, 10, 0.5, -10)
    IconLabel.ImageColor3 = theme.TextColor
    if iconId then
        IconLabel.Image = "rbxassetid://"..iconId
    else
        IconLabel.Image = ""
    end
    IconLabel.Parent = TabButton

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 40, 0, 0)
    TitleLabel.Size     = UDim2.new(1, -40, 1, 0)
    TitleLabel.Font     = theme.Font
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Text = tabName
    TitleLabel.Parent = TabButton

    -- The page for this tab:
    local PageFrame = Instance.new("ScrollingFrame")
    PageFrame.Name = tabName.."_Page"
    PageFrame.Size = UDim2.new(1,0,1,0)
    PageFrame.CanvasSize = UDim2.new(0,0,0,0) -- auto expand if we want
    PageFrame.BackgroundColor3 = theme.ContentBackground
    PageFrame.BorderSizePixel = 0
    PageFrame.Visible = false
    PageFrame.ScrollBarThickness = 6
    PageFrame.ScrollBarImageColor3 = Color3.fromRGB(80,80,80)
    PageFrame.Parent = PagesFolder

    local PageLayout = Instance.new("UIListLayout")
    PageLayout.FillDirection = Enum.FillDirection.Vertical
    PageLayout.SortOrder     = Enum.SortOrder.LayoutOrder
    PageLayout.Padding       = UDim.new(0,6)
    PageLayout.Parent        = PageFrame

    local PagePadding = Instance.new("UIPadding", PageFrame)
    PagePadding.PaddingLeft  = UDim.new(0,10)
    PagePadding.PaddingTop   = UDim.new(0,10)

    -- Clicking the tab button:
    local function ShowThisTab()
        for _, child in ipairs(PagesFolder:GetChildren()) do
            if child:IsA("ScrollingFrame") then
                child.Visible = false
            end
        end
        PageFrame.Visible = true

        for _, otherBtn in ipairs(Sidebar:GetChildren()) do
            if otherBtn:IsA("TextButton") and otherBtn ~= TabButton then
                TweenObj(otherBtn, {BackgroundColor3 = theme.SidebarBackground}, 0.3)
            end
        end
        TweenObj(TabButton, {BackgroundColor3 = theme.AccentRed}, 0.3)
    end

    TabButton.MouseButton1Click:Connect(function()
        ShowThisTab()
    end)

    -- By default, if this is the first tab, we show it:
    local hasVisible = false
    for _, child in ipairs(PagesFolder:GetChildren()) do
        if child:IsA("ScrollingFrame") and child.Visible then
            hasVisible = true
            break
        end
    end
    if not hasVisible then
        PageFrame.Visible = true
        TabButton.BackgroundColor3 = theme.AccentRed
    end

    -- Return a "Tab" object that can create sections, toggles, etc.
    local TabObject = {}
    TabObject.Name      = tabName
    TabObject.PageFrame = PageFrame

    -- We'll define more creation methods below in the next parts
    function TabObject:CreateSection(title)
        local SectionFrame = Instance.new("Frame")
        SectionFrame.Name = (title or "Section").."_Section"
        SectionFrame.BackgroundColor3 = theme.ElementBackground
        SectionFrame.BorderSizePixel  = 0
        SectionFrame.Size = UDim2.new(1, -10, 0, 40)
        SectionFrame.Parent = PageFrame

        local corner = Instance.new("UICorner", SectionFrame)
        corner.CornerRadius = UDim.new(0,6)

        local sstroke = Instance.new("UIStroke", SectionFrame)
        sstroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
        sstroke.Thickness = 1
        sstroke.Color = theme.StrokeColor
        sstroke.Transparency = 0.4

        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Name  = "SectionTitle"
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Font     = theme.Font
        TitleLabel.TextSize = 15
        TitleLabel.TextColor3 = theme.TextColor
        TitleLabel.Text = title or "Section"
        TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        TitleLabel.Size = UDim2.new(1, -10, 1, 0)
        TitleLabel.Position = UDim2.new(0,10,0,0)
        TitleLabel.Parent = SectionFrame

        return SectionFrame
    end

    return TabObject
end

--------------------------------------------
-- PART 5: Add the method for tabs onto Window
--------------------------------------------
function NihubUI._AttachWindowMethods(window)
    function window:CreateTab(name, icon)
        return NihubUI:_CreateTab(self, name, icon)
    end
end

function NihubUI:CreateWindow(settings)
    local newWindow = self._BaseCreateWindow(settings)
    self._AttachWindowMethods(newWindow)
    return newWindow
end

--------------------------------------------
-- PART 6: CREATE UI ELEMENTS (TOGGLES, ETC.)
--------------------------------------------
-- We'll add more methods to a "Section" or "Tab" object so you can do:
--   local toggle = Section:CreateToggle({Name="Auto Fish", ...})
-- etc.

-- Because we have a "TabObject:CreateSection()" returning a "Frame," we might 
-- want the next step to do "Section:CreateToggle(...)." We can approach this 
-- by hooking each Section up with a function library. Or we can define them 
-- directly in the Tab. 
-- For cleanliness, let's define a "Components" module inside NihubUI.

NihubUI.Components = {}

-- Master function: "CreateToggle" (like "Auto Fish" in your screenshot).
function NihubUI.Components.CreateToggle(parentFrame, data)
    -- data = {Name="Auto Fish", Default=false, Callback=function(val)end, ...}
    local theme = NihubUI.CurrentTheme
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = (data.Name or "Toggle").."_Toggle"
    ToggleFrame.Parent = parentFrame
    ToggleFrame.BackgroundColor3 = theme.ElementBackground
    ToggleFrame.BorderSizePixel  = 0
    ToggleFrame.Size = UDim2.new(1, -10, 0, 40)

    local corner = Instance.new("UICorner", ToggleFrame)
    corner.CornerRadius = UDim.new(0,6)

    local stroke = Instance.new("UIStroke", ToggleFrame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.5

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name   = "Title"
    TitleLabel.Parent = ToggleFrame
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font   = theme.Font
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.Text = data.Name or "Toggle"
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Position = UDim2.new(0,10,0,0)
    TitleLabel.Size     = UDim2.new(1, -60,1,0)

    -- The clickable "switch"
    local Switch = Instance.new("Frame")
    Switch.Name = "Switch"
    Switch.AnchorPoint = Vector2.new(1,0.5)
    Switch.Position = UDim2.new(1, -10, 0.5, 0)
    Switch.Size     = UDim2.new(0,50,0,22)
    Switch.BackgroundColor3 = theme.ToggleDisabled
    Switch.Parent = ToggleFrame

    local scorner = Instance.new("UICorner", Switch)
    scorner.CornerRadius = UDim.new(0,11)

    local sstroke = Instance.new("UIStroke", Switch)
    sstroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    sstroke.Thickness = 2
    sstroke.Color = Color3.fromRGB(50,50,50)
    sstroke.Transparency = 0.3

    local Knob = Instance.new("Frame")
    Knob.Name = "Knob"
    Knob.Size = UDim2.new(0,18,0,18)
    Knob.Position = UDim2.new(0,2,0,2)
    Knob.BackgroundColor3 = Color3.fromRGB(200,200,200)
    Knob.Parent = Switch

    local kncorner = Instance.new("UICorner", Knob)
    kncorner.CornerRadius = UDim.new(0,9)

    local On = data.Default or false
    local function SetToggleState(state)
        On = state
        if state then
            -- Move knob to right side, color green
            TweenObj(Switch, {BackgroundColor3 = theme.ToggleEnabled}, 0.2)
            TweenObj(Knob,   {Position = UDim2.new(1, -20, 0,2)}, 0.2)
        else
            TweenObj(Switch, {BackgroundColor3 = theme.ToggleDisabled}, 0.2)
            TweenObj(Knob,   {Position = UDim2.new(0, 2, 0,2)}, 0.2)
        end
        if data.Callback then
            data.Callback(On)
        end
    end

    local ClickDetector = Instance.new("TextButton")
    ClickDetector.Name = "ClickDetector"
    ClickDetector.Parent = ToggleFrame
    ClickDetector.BackgroundTransparency = 1
    ClickDetector.Size = UDim2.new(1,0,1,0)
    ClickDetector.Text = ""

    ClickDetector.MouseButton1Click:Connect(function()
        SetToggleState(not On)
    end)

    -- Initialize
    SetToggleState(On)

    -- Return an object so you can do .Set(newState) from code:
    local ToggleObj = {}
    function ToggleObj:Set(value)
        SetToggleState(value)
    end
    function ToggleObj:Get()
        return On
    end

    return ToggleObj
end

-- Next, "CreateSlider", "CreateDropdown", "CreateInput", etc.
NihubUI.Components.CreateSlider = function(parentFrame, data)
    -- data = {
    --   Name="Shake Delay (ms)",
    --   Min=0, Max=10,
    --   Current=3.5,
    --   Increment=0.5,
    --   Callback=function(newVal)end
    -- }
    local theme = NihubUI.CurrentTheme
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = (data.Name or "Slider").."_Slider"
    SliderFrame.Parent = parentFrame
    SliderFrame.BackgroundColor3 = theme.ElementBackground
    SliderFrame.BorderSizePixel  = 0
    SliderFrame.Size = UDim2.new(1, -10, 0, 60)

    local corner = Instance.new("UICorner", SliderFrame)
    corner.CornerRadius = UDim.new(0,6)

    local stroke = Instance.new("UIStroke", SliderFrame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.5

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "SliderTitle"
    TitleLabel.Parent = SliderFrame
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = theme.Font
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.Text = data.Name or "Slider"
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Size = UDim2.new(1, -10, 0,20)
    TitleLabel.Position = UDim2.new(0,10,0,5)

    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Name = "SliderValue"
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Font = theme.Font
    ValueLabel.TextSize = 14
    ValueLabel.TextColor3 = theme.TextColor
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Size = UDim2.new(1, -10, 0,20)
    ValueLabel.Position = UDim2.new(0,10,0,5)
    ValueLabel.Parent = SliderFrame
    ValueLabel.Text = ""

    local BarFrame = Instance.new("Frame")
    BarFrame.Name = "BarFrame"
    BarFrame.Size = UDim2.new(1, -20, 0,6)
    BarFrame.Position = UDim2.new(0,10,0,35)
    BarFrame.BackgroundColor3 = theme.SliderBar
    BarFrame.BorderSizePixel = 0
    BarFrame.Parent = SliderFrame

    local barCorner = Instance.new("UICorner", BarFrame)
    barCorner.CornerRadius = UDim.new(0,3)

    local Fill = Instance.new("Frame")
    Fill.Name = "Progress"
    Fill.Size = UDim2.new(0.5,0,1,0)
    Fill.BackgroundColor3 = theme.SliderProgress
    Fill.BorderSizePixel = 0
    Fill.Parent = BarFrame

    local fillCorner = Instance.new("UICorner", Fill)
    fillCorner.CornerRadius = UDim.new(0,3)

    -- so we can drag the fill
    local Min = data.Min or 0
    local Max = data.Max or 10
    local Current = data.Current or 0
    local Increment = data.Increment or 0.5

    local function UpdateValue(val)
        Current = math.clamp(val, Min, Max)
        -- round to increment
        local steps = math.floor((Current - Min)/Increment+0.5)
        Current = Min + steps*Increment
        local percent = (Current - Min)/(Max - Min)
        Fill:TweenSize(UDim2.new(percent,0,1,0), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.1, true)
        ValueLabel.Text = tostring(Current) .. (data.Suffix or "")
        if data.Callback then
            data.Callback(Current)
        end
    end

    local dragging = false
    local BarInput = Instance.new("TextButton")
    BarInput.Name = "BarInput"
    BarInput.Text = ""
    BarInput.BackgroundTransparency = 1
    BarInput.Size = UDim2.new(1,0,1,0)
    BarInput.Parent = BarFrame

    BarInput.MouseButton1Down:Connect(function(x,y)
        dragging = true
        local barPos = BarFrame.AbsolutePosition.X
        local barSize= BarFrame.AbsoluteSize.X
        local delta  = x - barPos
        local ratio  = delta/barSize
        local newVal = Min + ratio*(Max-Min)
        UpdateValue(newVal)
    end)
    BarInput.MouseButton1Up:Connect(function()
        dragging = false
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local x = input.Position.X
            local barPos = BarFrame.AbsolutePosition.X
            local barSize= BarFrame.AbsoluteSize.X
            local delta  = x - barPos
            local ratio  = delta/barSize
            local newVal = Min + ratio*(Max-Min)
            UpdateValue(newVal)
        end
    end)

    UpdateValue(Current)

    -- Return slider object:
    local SliderObj = {}
    function SliderObj:Set(val)
        UpdateValue(val)
    end
    function SliderObj:Get()
        return Current
    end
    return SliderObj
end

-- Dropdown
NihubUI.Components.CreateDropdown = function(parentFrame, data)
    local theme = NihubUI.CurrentTheme
    local DropFrame = Instance.new("Frame")
    DropFrame.Name = (data.Name or "Dropdown").."_Dropdown"
    DropFrame.Parent = parentFrame
    DropFrame.BackgroundColor3 = theme.ElementBackground
    DropFrame.BorderSizePixel  = 0
    DropFrame.Size = UDim2.new(1, -10, 0, 40)

    local corner = Instance.new("UICorner", DropFrame)
    corner.CornerRadius = UDim.new(0,6)

    local stroke = Instance.new("UIStroke", DropFrame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.5

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "DropdownTitle"
    TitleLabel.Parent = DropFrame
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = theme.Font
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.Text = data.Name or "Dropdown"
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Size = UDim2.new(1, -10, 0,20)
    TitleLabel.Position = UDim2.new(0,10,0,2)

    local SelectedLabel = Instance.new("TextLabel")
    SelectedLabel.Name = "Selected"
    SelectedLabel.BackgroundTransparency = 1
    SelectedLabel.Font = theme.Font
    SelectedLabel.TextSize = 14
    SelectedLabel.TextColor3 = theme.TextColor
    SelectedLabel.Text = data.Default or (data.Options and data.Options[1]) or "None"
    SelectedLabel.TextXAlignment = Enum.TextXAlignment.Right
    SelectedLabel.Size = UDim2.new(1, -10, 0,20)
    SelectedLabel.Position = UDim2.new(0,10,0,2)
    SelectedLabel.Parent = DropFrame

    local ExpandButton = Instance.new("TextButton")
    ExpandButton.Name = "ExpandButton"
    ExpandButton.Text = ""
    ExpandButton.BackgroundTransparency = 1
    ExpandButton.Size = UDim2.new(1,0,1,0)
    ExpandButton.Parent = DropFrame

    local OptionFrame = Instance.new("Frame")
    OptionFrame.Name = "OptionFrame"
    OptionFrame.BackgroundColor3 = theme.DropdownBackground
    OptionFrame.BorderSizePixel = 0
    OptionFrame.Size = UDim2.new(1,0,0,0)
    OptionFrame.ClipsDescendants = true
    OptionFrame.Visible = false
    OptionFrame.Parent = DropFrame

    local UICornerOpt = Instance.new("UICorner", OptionFrame)
    UICornerOpt.CornerRadius = UDim.new(0,6)

    local UIStrokeOpt = Instance.new("UIStroke", OptionFrame)
    UIStrokeOpt.Thickness = 1
    UIStrokeOpt.Color = theme.StrokeColor
    UIStrokeOpt.Transparency = 0.5

    local ListLayout = Instance.new("UIListLayout", OptionFrame)
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder

    local isOpen = false
    local function ToggleDropdown()
        if isOpen then
            -- close
            isOpen = false
            TweenObj(OptionFrame, {Size = UDim2.new(1,0,0,0)}, 0.3)
            wait(0.3)
            OptionFrame.Visible = false
        else
            isOpen = true
            OptionFrame.Visible = true
            local h = #data.Options * 22
            TweenObj(OptionFrame, {Size = UDim2.new(1,0,0,h)}, 0.3)
        end
    end
    ExpandButton.MouseButton1Click:Connect(function()
        ToggleDropdown()
    end)

    -- Populate options
    if data.Options then
        for i, option in ipairs(data.Options) do
            local optButton = Instance.new("TextButton")
            optButton.Name = "Option_"..tostring(option)
            optButton.BackgroundColor3 = theme.DropdownBackground
            optButton.BorderSizePixel  = 0
            optButton.Text = option
            optButton.Font = theme.Font
            optButton.TextSize = 14
            optButton.TextColor3 = theme.TextColor
            optButton.Size = UDim2.new(1,0,0,22)
            optButton.Parent = OptionFrame

            local optStroke = Instance.new("UIStroke", optButton)
            optStroke.Thickness = 1
            optStroke.Transparency = 1 -- We'll fade it in if we want on hover

            optButton.MouseButton1Click:Connect(function()
                SelectedLabel.Text = option
                ToggleDropdown()
                if data.Callback then
                    data.Callback(option)
                end
            end)
            optButton.MouseEnter:Connect(function()
                TweenObj(optButton, {BackgroundColor3 = theme.DropdownHover}, 0.2)
            end)
            optButton.MouseLeave:Connect(function()
                TweenObj(optButton, {BackgroundColor3 = theme.DropdownBackground}, 0.2)
            end)
        end
    end

    local DropObj = {}
    function DropObj:Set(value)
        SelectedLabel.Text = value
        if data.Callback then
            data.Callback(value)
        end
    end
    function DropObj:Get()
        return SelectedLabel.Text
    end

    return DropObj
end

-- Input box:
NihubUI.Components.CreateInput = function(parentFrame, data)
    local theme = NihubUI.CurrentTheme
    local InputFrame = Instance.new("Frame")
    InputFrame.Name = (data.Name or "Input").."_Input"
    InputFrame.BackgroundColor3 = theme.ElementBackground
    InputFrame.BorderSizePixel  = 0
    InputFrame.Size = UDim2.new(1, -10, 0, 40)
    InputFrame.Parent = parentFrame

    local corner = Instance.new("UICorner", InputFrame)
    corner.CornerRadius = UDim.new(0,6)

    local stroke = Instance.new("UIStroke", InputFrame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.5

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "InputTitle"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Font = theme.Font
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.Text = data.Name or "Input"
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Size = UDim2.new(1, -10, 0,20)
    TitleLabel.Position = UDim2.new(0,10,0,2)
    TitleLabel.Parent = InputFrame

    local Box = Instance.new("TextBox")
    Box.Name = "Box"
    Box.BackgroundColor3 = theme.ElementBackground
    Box.BorderSizePixel  = 0
    Box.Size = UDim2.new(1, -20, 0,20)
    Box.Position = UDim2.new(0,10,0,20)
    Box.Font = theme.Font
    Box.TextSize = 14
    Box.TextColor3 = theme.TextColor
    Box.Text = ""
    Box.PlaceholderText = data.Placeholder or "Type here..."
    Box.Parent = InputFrame

    local boxCorner = Instance.new("UICorner", Box)
    boxCorner.CornerRadius = UDim.new(0,4)
    local boxStroke = Instance.new("UIStroke", Box)
    boxStroke.Thickness = 1
    boxStroke.Color = theme.StrokeColor
    boxStroke.Transparency = 0.5

    Box.FocusLost:Connect(function(enterPressed)
        if data.Callback then
            data.Callback(Box.Text)
        end
        if data.ClearOnFocusLost then
            Box.Text = ""
        end
    end)

    local InputObj = {}
    function InputObj:Set(text)
        Box.Text = text
        if data.Callback then
            data.Callback(text)
        end
    end
    function InputObj:Get()
        return Box.Text
    end
    return InputObj
end

--------------------------------------------
-- PART 7: ATTACH ELEMENT CREATION TO SECTIONS
--------------------------------------------
-- Right now, when we do `Tab:CreateSection()`, it returns a Frame. 
-- We'll allow that frame to have methods: .CreateToggle(), .CreateSlider(), etc.

local function AttachSectionMethods(SectionFrame)
    local Methods = {}

    function Methods:CreateToggle(info)
        return NihubUI.Components.CreateToggle(SectionFrame, info)
    end
    function Methods:CreateSlider(info)
        return NihubUI.Components.CreateSlider(SectionFrame, info)
    end
    function Methods:CreateDropdown(info)
        return NihubUI.Components.CreateDropdown(SectionFrame, info)
    end
    function Methods:CreateInput(info)
        return NihubUI.Components.CreateInput(SectionFrame, info)
    end
    -- You could add color pickers, keybinds, etc. similarly

    return Methods
end

-- We'll override the Tab:CreateSection method to return these methods, so you can do:
-- local section = FarmTab:CreateSection("Main Shit")
-- local toggle = section:CreateToggle(...)
do
    local oldSection = NihubUI._CreateTab
    -- We can't override the function inside the table since it references "TabObject:CreateSection".
    -- We'll do it in the function that returns "TabObject."
end

-- We'll intercept the return from TabObject:CreateSection(...) so it returns 
-- the "section methods" instead of just the Frame.

local oldCreateTab = NihubUI._CreateTab
function NihubUI:_CreateTab(window, tabName, iconId)
    local tabObj = oldCreateTab(self, window, tabName, iconId)
    local oldSectionFn = tabObj.CreateSection
    function tabObj:CreateSection(title)
        local frame = oldSectionFn(self, title)
        return AttachSectionMethods(frame)
    end
    return tabObj
end

--------------------------------------------
-- PART 8: NOTIFICATIONS
--------------------------------------------
-- We'll add a simple in-GUI notification system. 
-- Example usage:
--   NihubUI:Notify({Title="Hi", Text="Hello world", Duration=5})
local NotificationHolder = nil
function NihubUI:Notify(info)
    -- info = {Title="Title", Text="Content", Duration=5}
    if not NotificationHolder then
        NotificationHolder = Instance.new("ScreenGui")
        NotificationHolder.Name = "NihubNotifications"
        SafeInstanceParent(NotificationHolder)

        local notifFrame = Instance.new("Frame")
        notifFrame.Name = "Container"
        notifFrame.BackgroundTransparency = 1
        notifFrame.Size = UDim2.new(1,0,1,0)
        notifFrame.Parent = NotificationHolder
    end

    local container = NotificationHolder.Container or NotificationHolder:FindFirstChild("Container")
    if not container then
        container = Instance.new("Frame")
        container.Name = "Container"
        container.Size = UDim2.new(1,0,1,0)
        container.BackgroundTransparency = 1
        container.Parent = NotificationHolder
    end

    local theme = self.CurrentTheme
    local Duration = info.Duration or 5

    local NotifFrame = Instance.new("Frame")
    NotifFrame.Name = "Notification"
    NotifFrame.Size = UDim2.new(0,300,0,80)
    NotifFrame.Position = UDim2.new(1, 310, 1, -100)
    NotifFrame.BackgroundColor3 = theme.ElementBackground
    NotifFrame.BorderSizePixel  = 0
    NotifFrame.Parent = container

    local corner = Instance.new("UICorner", NotifFrame)
    corner.CornerRadius = UDim.new(0,6)
    local stroke = Instance.new("UIStroke", NotifFrame)
    stroke.Thickness = 1
    stroke.Color = theme.StrokeColor
    stroke.Transparency = 0.4

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "NotificationTitle"
    TitleLabel.Text = info.Title or "Notification"
    TitleLabel.Font = theme.Font
    TitleLabel.TextSize = 16
    TitleLabel.TextColor3 = theme.TextColor
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Size = UDim2.new(1, -10, 0,20)
    TitleLabel.Position = UDim2.new(0,10,0,5)
    TitleLabel.Parent = NotifFrame

    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "NotificationText"
    TextLabel.Text = info.Text or "Notification body..."
    TextLabel.Font = theme.Font
    TextLabel.TextSize = 14
    TextLabel.TextColor3 = theme.TextColor
    TextLabel.TextWrapped = true
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(1, -20, 0,40)
    TextLabel.Position = UDim2.new(0,10,0,25)
    TextLabel.Parent = NotifFrame

    NotifFrame.BackgroundTransparency = 1
    TitleLabel.TextTransparency = 1
    TextLabel.TextTransparency = 1

    NotifFrame.Position = UDim2.new(1,310,1,-100) -- offscreen
    TweenObj(NotifFrame, {Position = UDim2.new(1, -310, 1, -100), BackgroundTransparency=0}, 0.4)
    TweenObj(TitleLabel, {TextTransparency=0}, 0.6)
    TweenObj(TextLabel, {TextTransparency=0}, 0.6)

    -- wait the Duration, then remove:
    task.spawn(function()
        wait(Duration)
        TweenObj(NotifFrame, {Position=UDim2.new(1,310,1,-100), BackgroundTransparency=1}, 0.4)
        TweenObj(TitleLabel, {TextTransparency=1}, 0.3)
        TweenObj(TextLabel, {TextTransparency=1}, 0.3)
        wait(0.4)
        NotifFrame:Destroy()
    end)
end

--------------------------------------------
-- PART 9: CONFIGURATION (SAVE/LOAD)
--------------------------------------------
-- We'll store the Flag data in the library (like toggles, sliders, etc.) so we can reconstruct them
function NihubUI:SaveConfig()
    if not self.ConfigEnabled then return end
    local data = {}
    for flagName, val in pairs(self.Flags) do
        data[flagName] = val
    end
    local encoded = HttpService:JSONEncode(data)
    writefile(self.ConfigFilename, encoded)
end

function NihubUI:LoadConfig()
    if not self.ConfigEnabled then return end
    if isfile(self.ConfigFilename) then
        local contents = readfile(self.ConfigFilename)
        local success, decoded = pcall(function() return HttpService:JSONDecode(contents) end)
        if success and decoded then
            for flagName, val in pairs(decoded) do
                self.Flags[flagName] = val
                -- If we have a UI element referencing that flag, we'd set it
                -- Implementation is up to you— toggles, sliders, etc.
            end
        end
    end
end

--------------------------------------------
-- PART 10: KEYBIND SYSTEM (Optional)
--------------------------------------------
-- If you want a keybind to open/close the UI, or to do other stuff.

NihubUI.ToggleKey = Enum.KeyCode.RightShift -- default
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == NihubUI.ToggleKey then
        if not BusyTween then
            local main = nil
            for _, child in ipairs(CoreGui:GetChildren()) do
                if child.Name == "NihubPrivateUI" then
                    main = child:FindFirstChild("MainFrame",true)
                    break
                end
            end
            if main then
                if Hidden then
                    Hidden = false
                    BusyTween = true
                    TweenObj(main, {Size=UDim2.new(0,750,0,500)}, 0.4)
                    wait(0.4)
                    BusyTween = false
                else
                    Hidden = true
                    BusyTween = true
                    TweenObj(main, {Size=UDim2.new(0,750,0,45)}, 0.4)
                    wait(0.4)
                    BusyTween = false
                end
            end
        end
    end
end)

--------------------------------------------
-- FINALLY: RETURN THE LIBRARY
--------------------------------------------
return NihubUI
